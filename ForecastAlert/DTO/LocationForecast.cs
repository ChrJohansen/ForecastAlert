namespace Forecast.domain;

// Generated by Gemini 2.5 Flash based on https://api.met.no/weatherapi/locationforecast/2.0/documentation#!/data/get_compact

// This file contains simplified .NET C# classes that conceptually represent
// the data structure returned by the MET Norway Locationforecast 2.0 API.
// These classes are illustrative and would typically be generated by tools
// like NSwag or AutoRest from the full OpenAPI specification.

// To use these classes, you would typically deserialize the JSON response
// from the MET Norway API into an instance of the LocationForecast object.
// For example, using System.Text.Json or Newtonsoft.Json.
using System;
using System.Collections.Generic;
using System.Text.Json.Serialization; // For System.Text.Json attributes


/// <summary>
/// Represents the root object of the Locationforecast 2.0 API response.
/// This typically follows a GeoJSON-like structure.
/// </summary>
public class LocationForecast
{
    [JsonPropertyName("type")] public string Type { get; set; } // e.g., "Feature"

    [JsonPropertyName("geometry")] public Geometry Geometry { get; set; }

    [JsonPropertyName("properties")] public Properties Properties { get; set; }
}

/// <summary>
/// Represents the geometry information, typically a Point for a single location.
/// </summary>
public class Geometry
{
    [JsonPropertyName("type")] public string Type { get; set; } // e.g., "Point"

    [JsonPropertyName("coordinates")] public List<double> Coordinates { get; set; } // [longitude, latitude, altitude]
}

/// <summary>
/// Contains the main data properties of the forecast, including metadata and time series.
/// </summary>
public class Properties
{
    [JsonPropertyName("meta")] public Meta Meta { get; set; }

    [JsonPropertyName("timeseries")] public List<TimeSeries> TimeSeries { get; set; }
}

/// <summary>
/// Contains metadata about the forecast, such as update times and units.
/// </summary>
public class Meta
{
    [JsonPropertyName("updated_at")] public DateTime UpdatedAt { get; set; }

    [JsonPropertyName("units")] public Units Units { get; set; }
}

/// <summary>
/// Defines the units for various weather parameters.
/// </summary>
public class Units
{
    [JsonPropertyName("air_temperature")] public string AirTemperature { get; set; } // e.g., "celsius"

    [JsonPropertyName("wind_speed")] public string WindSpeed { get; set; } // e.g., "m/s"

    [JsonPropertyName("precipitation_amount")]
    public string PrecipitationAmount { get; set; } // e.g., "mm"

    [JsonPropertyName("relative_humidity")]
    public string RelativeHumidity { get; set; } // e.g., "%"

    // Add more units as per the actual API specification
}

/// <summary>
/// Represents a single point in the forecast time series.
/// </summary>
public class TimeSeries
{
    [JsonPropertyName("time")] public DateTime Time { get; set; }

    [JsonPropertyName("data")] public TimeSeriesData Data { get; set; }
}

/// <summary>
/// Contains the actual weather data for a specific time point.
/// This will have different properties depending on whether it's
/// for instant, next_1_hours, next_6_hours, or next_12_hours.
/// For simplicity, this example combines common parameters.
/// </summary>
public class TimeSeriesData
{
    [JsonPropertyName("instant")] public InstantData Instant { get; set; }

    [JsonPropertyName("next_1_hours")] public NextHoursData Next1Hours { get; set; }

    [JsonPropertyName("next_6_hours")] public NextHoursData Next6Hours { get; set; }

    [JsonPropertyName("next_12_hours")] public NextHoursData Next12Hours { get; set; }
}

/// <summary>
/// Represents instantaneous weather data.
/// </summary>
public class InstantData
{
    [JsonPropertyName("details")] public InstantDetails Details { get; set; }
}

/// <summary>
/// Contains detailed instantaneous weather parameters.
/// </summary>
public class InstantDetails
{
    [JsonPropertyName("air_temperature")] public double? AirTemperature { get; set; }

    [JsonPropertyName("wind_speed")] public double? WindSpeed { get; set; }

    [JsonPropertyName("relative_humidity")]
    public double? RelativeHumidity { get; set; }

    [JsonPropertyName("wind_from_direction")]
    public double? WindFromDirection { get; set; } // Degrees

    [JsonPropertyName("air_pressure_at_sea_level")]
    public double? AirPressureAtSeaLevel { get; set; }

    // Add more instant details as per the actual API specification
}

/// <summary>
/// Represents aggregated weather data for a future period (e.g., 1, 6, or 12 hours).
/// </summary>
public class NextHoursData
{
    [JsonPropertyName("summary")] public Summary Summary { get; set; }

    [JsonPropertyName("details")] public NextHoursDetails Details { get; set; }
}

/// <summary>
/// Provides a summary of the weather for the period, often including a symbol code.
/// </summary>
public class Summary
{
    [JsonPropertyName("symbol_code")] public string SymbolCode { get; set; } // e.g., "partlycloudy_day"
}

/// <summary>
/// Contains detailed aggregated weather parameters for a future period.
/// </summary>
public class NextHoursDetails
{
    [JsonPropertyName("precipitation_amount")]
    public double? PrecipitationAmount { get; set; } // Total precipitation for the period

    // Add more next_hours details as per the actual API specification
}